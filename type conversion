#include<iostream>
using namespace std; 

class rectangle
{
  int l,b;
  float area;
  public : 
  rectangle (int length , int breadth)
  {
    l = length;
    b = breadth;
    area = l*b;

  }
  void show()
  {
     cout <<" \n length " << l << " \n breadth " << b << "\n area of rectangle  :" << area << endl;

  }
};

class triangle 
{
  int b ,h;
  float area;
  public: 
   triangle(int base, int height)
   {
    b= base;
    h= height ;
    area = 0.5 * b * h;
   }
   void showot()
   {
         cout <<" \n base " << b << " \nheight  " << h << "\n area of triangle  :" << area << endl;

   }
   operator rectangle()
   {
    rectangle rect(b,h);
    return rect;
   }
};



int main() 

{
   triangle t(45,80);
   rectangle r=t;
   t.showot();
   r.show();

   return 0;
}



ANOTHER EXAMPLE OF THE SAME TYPE CODEIS : 
// WAP  TO CONVERT THE POLAR COORDINATE floatO CARTESIAN  
 
 #include <iostream>
#include <cmath> 

using namespace std;
class polar;
class cartesian
{
  float x;
   float y;
  public:
       cartesian()
       {
        x=0;
        y=0;
       }
      cartesian (float a, float b)
      {
       x=a;
       y=b;
      } 
      void show ()
      { 
        cout << " the coordinates are : " << x << " \t " <<  y<< endl;
      }
};
class polar 
{
  float  rad;
  float ang;
  public: 
      polar()
      {
        rad=0;
        ang=0;

      }
      polar (float a, float b)
      {
        rad =a;
        ang = b;
      }
      operator cartesian()
      {
        float radian= ang * 2*3.14/180;
        float c = rad * cos(radian);
        float d= rad * sin(radian);
        return cartesian(c,d);
      }
      
};

int main() 

{
   polar p(3,60);
 
   cartesian c = p;
   c.show();
  
   return 0;
}
